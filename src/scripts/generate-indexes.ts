#! /usr/bin/env node

/**
 * This file automatically generates the index registries for all directories specified in `directories` below. It runs automatically when `yarn preflight` runs or you can run it via `yarn genreg`
 */

import { ConfigFile } from '@typedefs/config-file';
import fs from 'node:fs';
import path from 'path';
import printMessage from '../helpers/print-message';
import changeCase from '../helpers/string-functions';

const message = `/**
 This file is autogenerated by Builda, please do not edit it.
 To generate an updated version, please run \`builda index\`
 **/`;

const generateLines = ({
  directory,
  parent
}: {
  directory: string;
  parent?: string;
}) => {
  const dir = fs.readdirSync(path.resolve(directory));
  // If dir is empty, do nothing
  if (dir.length !== 0) {
    return dir
      .map((file) => {
        const pathString = parent ? `${parent}/${file}` : file;
        if (!file.match(/\.[jt]sx$/)) {
          return `export { default as ${changeCase(
            file,
            'pascalCase'
          )} } from './${pathString}';`;
        }
        const fileNoExt = path.parse(file).name;
        const varName = changeCase(fileNoExt, 'camelCase');
        return `export { default as ${varName} } from './${fileNoExt}';`;
      })
      .filter((item) => item)
      .toString()
      .replace(/,/g, '\n');
  } else {
    return '';
  }
};

export const generateIndexes = (config: ConfigFile) => {
  const { indexes } = config;

  const { directories, indexExt } = indexes;

  const ext = indexExt || 'ts';

  directories.forEach((directory) => {
    let checkedDir = directory;
    let subdirs = [];
    let lines = '';

    if (directory.includes('*')) {
      checkedDir = directory.replace('/*', '');
      // scan directory for subdirectories
      subdirs = fs.readdirSync(path.resolve(checkedDir));
      subdirs.forEach((dir) => {
        const pathString = path.resolve(`${checkedDir}/${dir}`);
        return (lines += `${generateLines({
          directory: pathString,
          parent: dir
        })}\n`);
      });
    } else {
      lines = generateLines({ directory });
    }

    const fileContents = `${message}\n\n${lines}`;
    if (lines) {
      fs.writeFileSync(path.resolve(checkedDir, `index.${ext}`), fileContents);
    }
  });

  printMessage('Generating indexes', 'config');
};
