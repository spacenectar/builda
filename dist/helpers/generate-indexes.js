#! /usr/bin/env node
"use strict";
/**
 * This file automatically generates the index registries for all directories specified in `directories` below. It runs automatically when `yarn preflight` runs or you can run it via `yarn genreg`
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateIndexes = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const path_1 = __importDefault(require("path"));
const print_message_1 = __importDefault(require("./print-message"));
const string_functions_1 = __importDefault(require("./string-functions"));
const message = `/**
 This file is autogenerated by Builda, please do not edit it.
 To generate an updated version, please run \`builda index\`
 **/`;
const generateLines = ({ directory, parent }) => {
    const dir = node_fs_1.default.readdirSync(path_1.default.resolve(directory));
    // If dir is empty, do nothing
    if (dir.length !== 0) {
        return dir
            .map((file) => {
            const pathString = parent ? `${parent}/${file}` : file;
            if (!file.match(/\.[jt]sx$/)) {
                return `export { default as ${(0, string_functions_1.default)(file, 'pascalCase')} } from './${pathString}';`;
            }
            const fileNoExt = path_1.default.parse(file).name;
            const varName = (0, string_functions_1.default)(fileNoExt, 'camelCase');
            return `export { default as ${varName} } from './${fileNoExt}';`;
        })
            .filter((item) => item)
            .toString()
            .replace(/,/g, '\n');
    }
    else {
        return '';
    }
};
const generateIndexes = (directories, indexExt = 'ts') => {
    directories.forEach((directory) => {
        let checkedDir = directory;
        let subdirs = [];
        let lines = '';
        if (directory.includes('*')) {
            checkedDir = directory.replace('/*', '');
            // scan directory for subdirectories
            subdirs = node_fs_1.default.readdirSync(path_1.default.resolve(checkedDir));
            subdirs.forEach((dir) => {
                const pathString = path_1.default.resolve(`${checkedDir}/${dir}`);
                return (lines += `${generateLines({
                    directory: pathString,
                    parent: dir
                })}\n`);
            });
        }
        else {
            lines = generateLines({ directory });
        }
        const fileContents = `${message}\n\n${lines}`;
        if (lines) {
            node_fs_1.default.writeFileSync(path_1.default.resolve(checkedDir, `index.${indexExt}`), fileContents);
        }
    });
    (0, print_message_1.default)('Generating indexes', 'config');
};
exports.generateIndexes = generateIndexes;
