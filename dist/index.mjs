#! /usr/bin/env node
var Ct=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});import Vo from"yargs";import Xo from"chalk";var m={version:"5.2.0",buildaDir:".builda",websiteUrl:"https://www.builda.app",buildaReadmeFileName:"getting-started.md",repository:{type:"git",url:"git+https://github.com/spacenectar/builda"}};import Ro from"execa";import Mo from"inquirer";import rr from"fs";import Xe from"path";import et from"process";import De from"chalk";var te=()=>console.log(De.magenta(`
  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ${De.white(`v${m.version}
`)}
  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588
  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588\u2580   \u2588\u2588\u2588
  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588
  \u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588
  \u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588
  \u2588\u2588\u2588    \u2588\u2588\u2584 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588
  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588
  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588

  ${De.white.bold("The Everything Generator")} \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588
`));import k from"chalk";import Et from"process";import At from"readline";var xr={interval:80,frames:["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"]},be=Et.stdout,vr=Et.stderr,Q,$r=(e,t,r)=>{let o=null;if(t&&t==="error"&&(Q!==void 0&&clearInterval(Q),o=k.red(`\u{1F6A8} ${e}`)),t&&t==="danger"&&(o=k.red(`${e}`)),t&&t==="warning"&&(o=k.yellow(`\u{1F514} ${e}`)),t&&t==="config"&&(o=k.blue(`\u{1F527} ${e}`)),t&&t==="downloading"&&(o=k.blue(`\u{1F30D} ${e}`)),t&&t==="copying"&&(o=k.blue(`\u{1F4C2} ${e}`)),t&&t==="installing"&&(o=k.blue(`\u{1F4E6} ${e}`)),t&&t==="notice"&&(o=k.blue(`\u{1F4DD} ${e}`)),t&&t==="info"&&(o=k.bgHex("#6699CC").white.bold(" i ")+" "+k.reset.blue(e)),t&&t==="success"&&(Q!==void 0&&clearInterval(Q),o=k.green(`\u2705 ${e}`)),t&&t==="watch"&&(o=k.magenta(`\u{1F440} ${e}`)),t&&t==="build"&&(o=k.magenta(`\u{1F3D7} ${e}`)),t&&t==="run"&&(o=k.magenta(`\u{1F3C3} ${e}`)),t&&t==="primary"&&(o=k.magenta(`${e}`)),t&&t==="secondary"&&(o=k.white(`${e}`)),t&&t==="processing"){let s=xr,n=s.frames,a=s.interval,c=0;Q!==void 0&&clearInterval(Q),Q=setInterval(()=>{let p=n[c];p==null&&(c=0,p=n[c]),At.clearLine(be,0),At.cursorTo(be,0),be.write(p),c=c>=n.length?0:c+1},a),o=k.blue(`${e}`)}return t||(o=e),r?o:(t==="error"?vr:be).write(`${o}
`)},u=$r;import Rr from"chalk";var Oe=["adorable","adventurous","aggressive","agreeable","alert","alive","amused","angry","annoyed","annoying","anxious","arrogant","ashamed","attractive","average","awful","bad","beautiful","better","bewildered","black","bloody","blue","blue-eyed","blushing","bored","brainy","brave","breakable","bright","busy","calm","careful","cautious","charming","cheerful","clean","clear","clever","cloudy","clumsy","colorful","combative","comfortable","concerned","condemned","confused","cooperative","courageous","crazy","creepy","crowded","cruel","curious","cute","dangerous","dark","dead","defeated","defiant","delightful","depressed","determined","different","difficult","disgusted","distinct","disturbed","dizzy","doubtful","drab","dull","eager","easy","elated","elegant","embarrassed","enchanting","encouraging","energetic","enthusiastic","envious","evil","excited","expensive","exuberant","fair","faithful","famous","fancy","fantastic","fierce","filthy","fine","foolish","fragile","frail","frantic","friendly","frightened","funny","gentle","gifted","glamorous","gleaming","glorious","good","gorgeous","graceful","grieving","grotesque","grumpy","handsome","happy","healthy","helpful","helpless","hilarious","homeless","homely","horrible","hungry","hurt","ill","important","impossible","inexpensive","innocent","inquisitive","itchy","jealous","jittery","jolly","joyous","kind","lazy","light","lively","lonely","long","lovely","lucky","magnificent","misty","modern","motionless","muddy","mushy","mysterious","nasty","naughty","nervous","nice","nutty","obedient","obnoxious","odd","old-fashioned","open","outrageous","outstanding","panicky","perfect","plain","pleasant","poised","poor","powerful","precious","prickly","proud","putrid","puzzled","quaint","real","relieved","repulsive","rich","scary","selfish","shiny","shy","silly","sleepy","smiling","smoggy","sore","sparkling","splendid","spotless","stormy","strange","stupid","successful","super","talented","tame","tasty","tender","tense","terrible","thankful","thoughtful","thoughtless","tired","tough","troubled","ugliest","ugly","uninterested","unsightly","unusual","upset","uptight","vast","victorious","vivacious","wandering","weary","wicked","wide-eyed","wild","witty","worried","worrisome","wrong","zany","zealous"],We=["Actor","Gold","Painting","Advertisement","Grass","Parrot","Afternoon","Greece","Pencil","Airport","Guitar","Piano","Ambulance","Hair","Pillow","Animal","Hamburger","Pizza","Answer","Helicopter","Planet","Apple","Helmet","Plastic","Army","Holiday","Portugal","Australia","Honey","Potato","Balloon","Horse","Queen","Banana","Hospital","Quill","Battery","House","Rain","Beach","Hydrogen","Rainbow","Beard","Ice","Raincoat","Bed","Insect","Refrigerator","Belgium","Insurance","Restaurant","Boy","Iron","River","Branch","Island","Rocket","Breakfast","Jackal","Room","Brother","Jelly","Rose","Camera","Jewellery","Russia","Candle","Jordan","Sandwich","Car","Juice","School","Caravan","Kangaroo","Scooter","Carpet","King","Shampoo","Cartoon","Kitchen","Shoe","China","Kite","Soccer","Church","Knife","Spoon","Crayon","Lamp","Stone","Crowd","Lawyer","Sugar","Daughter","Leather","Sweden","Death","Library","Teacher","Denmark","Lighter","Telephone","Diamond","Lion","Television","Dinner","Lizard","Tent","Disease","Lock","Thailand","Doctor","London","Tomato","Dog","Lunch","Toothbrush","Dream","Machine","Traffic","Dress","Magazine","Train","Easter","Magician","Truck","Egg","Manchester","Uganda","Eggplant","Market","Umbrella","Egypt","Match","Van","Elephant","Microphone","Vase","Energy","Monkey","Vegetable","Engine","Morning","Vulture","England","Motorcycle","Wall","Evening","Nail","Whale","Eye","Napkin","Window","Family","Needle","Wire","Finland","Nest","Xylophone","Fish","Nigeria","Yacht","Flag","Night","Yak","Flower","Notebook","Zebra","Football","Ocean","Zoo","Forest","Oil","Garden","Fountain","Orange","Gas","France","Oxygen","Girl","Furniture","Oyster","Glass","Garage","Ghost"];var kr=()=>{let e=Oe[Math.floor(Math.random()*Oe.length)],t=We[Math.floor(Math.random()*We.length)];return`${e.toLowerCase()}-${t.toLowerCase()}`},we=kr;var Nt={root:{root:"/"},tradeStore:{root:"trade-store",prefabs:"prefabs",blueprints:"blueprints"},docs:{root:"docs",gettingStarted:"getting-started",prefabs:"prefabs",config:"config-file",blueprints:"blueprints",telemetry:"telemetry",init:"initialise-a-project",resolvers:"resolvers",indexes:"indexes"}};var I=(e,t)=>{let{websiteUrl:r}=m,o=e.split("/"),i=Nt,s=o[0]||"./",n=o.map(a=>{var c;return a===s?a:(c=i[s])==null?void 0:c[a]});return`${r}/${n.join("/")}${t?`#${t}`:""}`};var jr=e=>e.startsWith("/")||e.startsWith("./")||e.startsWith("..")||e.startsWith("~")?"local":"remote",F=jr;var Rt=e=>{let t=/^(?:[a-zA-Z:]+_[a-zA-Z:]+)+$/,r=/^(?:[A-Z]{1}[a-zA-Z:]+[A-Z]{1}[a-zA-Z:]+)+$/,o=/^(?:[a-z]{1}[a-zA-Z:]+[A-Z]{1}[a-zA-Z:]+)+$/,i=/^(?:[a-zA-Z:]+ [a-zA-Z:]+)+$/,s=/^(?:[a-zA-Z:]+-[a-zA-Z:]+)+$/;return t.test(e)?"snake":r.test(e)?"pascal":o.test(e)?"camel":i.test(e)?"sentence":s.test(e)?"kebab":"unknown"};var le=e=>e.replace(/\s{2,}/g," ").trim(),Mt=e=>{let t=Rt(e),r=e.split(/(?=[A-Z:])/).filter(i=>i!==":"),o=r.slice(1).map(i=>i.toLowerCase());if(t==="snake"){let i=e.replace(/_/g," ").toLowerCase().replace(/:/g," ");return le(i)}if(t==="pascal"){let i=e.split(/(?=[A-Z])/).map(s=>s.toLowerCase()).join(" ").replace(/:/g," ");return le(i)}if(t==="camel"){let i=r[0]||"";o.unshift(i.toLowerCase());let s=o.join(" ");return le(s)}if(t==="kebab"){let i=e.replace(/-/g," ").replace(/:/g," ").toLowerCase();return le(i)}return t==="sentence"?le(e.replace(/:/g,"")):e};var xe=["Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"],Tr=["Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"],It=["","","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"],ve=e=>{let t=/\d+/g,r=e.match(t);if(r){let o=r.map(i=>{let s=parseInt(i,10);if(s<10)return":"+xe[s];if(s<20)return":"+Tr[s-10];if(s<100)return":"+It[Math.floor(s/10)]+xe[s%10];if(s<1e3){let n=s%100===0,a=":"+xe[Math.floor(s/100)]+":Hundred";return n||(a+=":And:"+It[Math.floor(s%100/10)]+":"+xe[s%10]),a}if(s<1e6)return ve(Math.floor(s/1e3).toString())+":Thousand"+ve((s%1e3).toString());throw new Error("Numbers larger than 1 million are not supported")}).join(":");return e.replace(t,o)}return e};var Lt=e=>e.replace(/&/g,":And").replace(/@/g,":At").replace(/#/g,":Hash").replace(/\$/g,":Dollar").replace(/£/g,":Pound").replace(/%/g,":Percent").replace(/\+/g,":Plus").replace(/\*/g,":Asterisk");var Pr=(e,t)=>t.startsWith("builda")||t.startsWith("run-s")||t.startsWith("run-p")||t.startsWith("npm-run-all")||t.startsWith("concurrently")?t:`builda x ${e}`,$e=Pr;var Cr=(e,t)=>{let o=Lt(e),i=ve(o),n=Mt(i).split(" ");switch(t){case"snakeCase":return n.join("_").toLowerCase();case"kebabCase":return n.join("-").toLowerCase();case"pascalCase":return n.map(a=>a.charAt(0).toUpperCase()+a.slice(1)).join("");case"camelCase":return n.map((a,c)=>c===0?a.charAt(0).toLowerCase()+a.slice(1):a.charAt(0).toUpperCase()+a.slice(1)).join("");case"sentenceCase":default:return n.map((a,c)=>c===0?a.charAt(0).toUpperCase()+a.slice(1):a.charAt(0).toLowerCase()+a.slice(1)).join(" ")}},v=Cr;var N=({link:e,anchor:t,endText:r})=>(r=r||"for more information.",`

See `+Rr.blue.underline(I(e,t))+" "+r);import re from"chalk";import Mr from"inquirer";var y=(e,t)=>{console.clear(),te();let r=new Mr.ui.BottomBar,o=process.stdout.columns;t=t||"info";let i="bgBlue",s="i";t==="error"&&(i="bgRed",s="\u2716"),t==="success"&&(i="bgGreen",s="\u2714"),t==="warning"&&(i="bgYellow",s="\u26A0"),t==="builda"&&(i="bgMagenta",s="B\u0333");let n="  "+re.bold.white[i](`  ${s}  `),a="  "+re[i](" ".repeat(5))+" "+re[i](" ".repeat(o-10))+`
`,c=a+n+" "+re.bold.white[i](`  ${t.toUpperCase()}${" ".repeat(o-t.length-12)}
`)+a,p=re.white("\u2500".repeat(o)),f=e.replace(/\n/g,`
  `).replace(new RegExp(`(.{${o-20}})(\\s|$)`,"g"),`$1
  `);r.log.write(`
${c}\r
  ${re.white(f)}\r

${p}\r

`)};var l=e=>{let t=u(e,"danger",!0);throw new Error(t)};import Ir from"chalk";import Dt from"process";import Lr from"readline";var Dr=e=>new Promise(t=>{let r=Lr.createInterface({input:Dt.stdin,output:Dt.stdout});r.question(Ir.blue(`\u{1F914} ${e} [y/N] `),o=>{o=o.toLowerCase(),r.close(),t(o==="y")})}),ke=Dr;import Or from"fs";var Wr=(e,t)=>Or.cpSync(e,t,{dereference:!0,recursive:!0,force:!0}),Y=Wr;import ce from"fs";import Ot from"path";var Wt=(e,t)=>{ce.existsSync(t)||ce.mkdirSync(t,{recursive:!0}),ce.readdirSync(e).forEach(r=>{let o=Ot.resolve(e,r),i=Ot.join(t,r);ce.lstatSync(o).isDirectory()?Wt(o,i):ce.cpSync(o,i,{recursive:!0,dereference:!0})})},oe=Wt;import Be from"fs";import qe from"path";var Br=e=>{if(Be.existsSync(qe.resolve(process.cwd(),"package.json"))){let o={...JSON.parse(Be.readFileSync(qe.resolve(process.cwd(),"package.json"),"utf8")),builda:e===null?void 0:{...e}};Be.writeFileSync(qe.resolve(process.cwd(),"package.json"),JSON.stringify(o,null,2))}else l("No package.json found in project")},_=Br;import Bt from"fs";var qr=async e=>{try{return Bt.existsSync(e)||Bt.mkdirSync(e,{recursive:!0}),!0}catch{return!1}},S=qr;import qt from"fs";import zt from"path";var zr=e=>{if(qt.existsSync(zt.resolve(process.cwd(),"package.json"))){let r=JSON.parse(qt.readFileSync(zt.resolve(process.cwd(),"package.json"),"utf8")).builda;if(!r&&!e)l('No "builda" entry found in package.json');else if(!r&&e)return{};return r}return l("No package.json found in project")},$=zr;import Se from"fs";import ie from"path";var Ur=(e,t)=>{let r=[],i=Se.readFileSync(e,"utf8").split(`
`);for(let s of i)if(s!==""&&s.startsWith("@extends")){let n=s.split(" ")[1];if(Se.existsSync(ie.resolve(t,n))){let c=Se.readFileSync(ie.resolve(t,n),"utf8").split(`
`);for(let p of c)if(p!==""&&!p.startsWith("#"))if(n!=null&&n.includes("/")){let d=n.split("/").pop(),f=n.replace(d,"");r.push(ie.join(f,p))}else r.push(p)}else l(`File ${n} does not exist. Please check your .buildaignore file.`)}else if(s!==""&&s.startsWith("@"))l(`Invalid line in .buildaignore file: ${s}. Only @extends is allowed to start with @.`);else{if(s!==""&&s.startsWith("!"))continue;s!==""&&!s.startsWith("#")&&r.push(s)}return[...new Set(r)]},Jr=(e,t)=>{let r=[];for(let o of t){let i=ie.join(e,o);o.includes("*")||(o.includes("/")?r.push(i):r.push(`**/${o}`))}return r},Gr=(e,t)=>{let r=t?"module":ie.join(e,"modules","prefab"),o=ie.resolve(r,".buildaignore");if(Se.existsSync(o)){let i=Ur(o,r);return Jr(r,i)}return[]},K=Gr;import D from"path";import ze from"fs";import Yr from"glob";var Ue=async({name:e,paths:t,ignore:r,substitute:o,fromRoot:i=!1,fromCustomPath:s,toRoot:n=!1})=>{let{buildaDir:a}=m,c=D.join(a,"modules","prefab"),p=D.join(a,"export"),d=[];for(let f of t){let g=i?f:D.join(c,f);if(!(r&&se(a,g)))if(f.includes("*")){let b=Yr.sync(g).map(x=>D.relative(c,x));d.push(await Ue({name:e,paths:b,ignore:r,substitute:o,fromRoot:i,fromCustomPath:s,toRoot:n}))}else if(ze.lstatSync(g).isDirectory()){let x=ze.readdirSync(g).map(h=>D.join(f,h));d.push(await Ue({name:e,paths:x,ignore:r,substitute:o,fromRoot:i,fromCustomPath:s,toRoot:n}))}else d.push(new Promise(b=>{let x=D.dirname(f),h=D.basename(f),j=D.join(p,x),O=s||D.join(process.cwd(),"..",".."),E=D.join(O,x);if(!se(a,g)){if(S(j),ze.existsSync(g)){let he=o.map(L=>L.reverseInExport?{...L,replace:L.with,with:L.replace}:L);H({file:g,outputDir:j,substitute:he,name:e}),n&&(S(E),H({file:g,rename:h.replace("unique.",""),outputDir:E,substitute:o,name:e}))}b(g)}}))}await Promise.all(d)},V=Ue;import Ut from"fs";import Jt from"path";import _r from"prettier";var Hr=["css","html","js","jsx","json","less","md","mdx","scss","sass","ts","tsx","yaml","yml","graphql"],Zr=({file:e,rename:t,content:r,outputDir:o,substitute:i,name:s})=>{let n=e;t&&(n=t),n=n==null?void 0:n.split("/").pop();let a=e?Ut.readFileSync(Jt.resolve(e),"utf8"):"",c=r??a;s&&(c=a.replace(/prefab-name-replace-string/g,v(s,"kebabCase")).replace(/%KEBAB_CASE%/g,v(s,"kebabCase")).replace(/%CAMEL_CASE%/g,v(s,"camelCase")).replace(/%SNAKE_CASE%/g,v(s,"snakeCase")).replace(/%PASCAL_CASE%/g,v(s,"pascalCase")).replace(/%SENTENCE_CASE%/g,v(s,"sentenceCase"))),i&&i.length>0&&i.forEach(d=>{let f=`${d.replace}`,g=new RegExp(f,"g");c=c.replace(g,d.with)});let p=n==null?void 0:n.split(".").pop();if(p&&Hr.includes(p)&&(c=e?_r.format(c,{filepath:Jt.resolve(e)}):c),c)return Ut.writeFileSync(`${o}/${n}`,c);throw new Error(`Could not write file ${n}`)},H=Zr;import Gt from"fs";import Je from"path";var{buildaDir:Qr}=m,ue=async(e,t,r)=>{let o=Je.join(t,Qr,"modules","prefab");e.forEach(async i=>{let s=Je.join(o,i);Gt.cpSync(s,Je.join(t,i),{recursive:!0}),r&&Gt.rmSync(s,{recursive:!0,force:!0})})};import ne from"path";import _t from"fs";import je from"path";import Te from"fs";var Yt=async()=>{if(Te.existsSync(je.resolve(process.cwd(),"package.json"))){let e=JSON.parse(Te.readFileSync(je.resolve(process.cwd(),"package.json"),"utf8")),t=JSON.parse(Te.readFileSync(je.resolve(process.cwd(),m.buildaDir,"modules","prefab","package.json"),"utf8")),r=t.scripts,o=e.scripts,i=Object.keys(o).filter(a=>!Object.keys(r).includes(a)),s={...r};i.forEach(a=>{s[a]=o[a]});let n={...t,dependencies:{...e.dependencies},devDependencies:{...e.devDependencies},peerDependencies:{...e.peerDependencies},scripts:s};Te.writeFileSync(je.resolve(process.cwd(),m.buildaDir,"export","package.json"),JSON.stringify(n,null,2))}else l("No package.json found in project")};var Kr=async({type:e,pathString:t})=>{var n,a;let r=process.cwd(),o=ne.join(r,m.buildaDir,"export"),i=await P(o),s=K(ne.join(r,m.buildaDir));if(e==="copy")return t==="package.json"?void 0:Y(`${r}/${t}`,ne.join(o,t));if(e==="update"){if(t==="package.json")return Yt();let c=(a=(n=i.generatorOptions)==null?void 0:n.rootFiles)==null?void 0:a.find(p=>typeof p=="string"||!p.substitutions||p.substitutions.length===0?!1:p.path===t);if(_t.rmSync(ne.join(o,t),{recursive:!0,force:!0}),c)await V({name:i.name,paths:[t],ignore:s,fromRoot:!0,substitute:c.substitutions});else return Y(`${r}/${t}`,ne.join(r,m.buildaDir,"export",t))}if(e==="delete")return t==="package.json"&&l("package.json deleted. This will break your project"),_t.rmSync(ne.join(o,t),{recursive:!0,force:!0})},B=Kr;var Vr=(e,t)=>{let r=K(e);for(let o of r)if(o.startsWith("**/")){let i=o.replace("**/",""),s=t.split("/").pop();if(i.includes(s))return!0}else if(o===t)return!0;return!1},se=Vr;import Pe from"fs";import Xr from"tar";import eo from"path";var to=async(e,t,r)=>{Pe.existsSync(`${e}/${r}.tgz`)?(Pe.copyFileSync(`${e}/${r}.tgz`,`${t}/${r}.tgz`),await Xr.extract({file:`${t}/${r}.tgz`,cwd:t}),Pe.unlinkSync(`${t}/${r}.tgz`)):l("No tarball found. Please run `builda package` first")},ro=async(e,t)=>{let r=eo.join(t||"./",m.buildaDir),o=await P(e),i=o.type==="blueprint"?`${r}/modules/blueprints/${o.name}`:`${r}/modules/prefab`;return await S(i),await to(e,i,"module"),Pe.writeFileSync(`${i}/registry.json`,JSON.stringify(o)),o},q=ro;import Ce from"fs";import ao from"path";import lo from"axios";import co from"tar";import oo from"fs";import io from"process";import so from"axios";var no=async e=>{let t="registry.json";if(e=e||io.cwd(),F(e)==="local")return JSON.parse(oo.readFileSync(`${e}/${t}`,"utf8"));let o=C({registryPath:e});o.error&&l(o.error);let i=o.url;i.includes("%FILE_NAME%")?i=i.replace("%FILE_NAME%",t):i=`${i}/${t}`;let s=await X(i,!0);return s.status||l(s.message),so.get(i,{responseType:"json"}).then(n=>n.data).catch(n=>{l(n.message)})},P=no;var uo=async(e,t)=>{let r=ao.join(t||"./",m.buildaDir),o=await P(e),i=o.type==="blueprint"?`${r}/modules/blueprints/${o.name}`:`${r}/modules/prefab`;return await S(i),u(`Downloading ${o.name}...`,"downloading"),await lo.get(`${e}/module.tgz`,{responseType:"arraybuffer",headers:{"Content-Type":"application/gzip"}}).then(s=>Ce.writeFileSync(`${i}/module.tgz`,s.data,{encoding:"binary"})).then(async()=>{if(Ce.existsSync(`${i}/module.tgz`)){u("Extracting module files...","config");try{await co.extract({file:`${i}/module.tgz`,cwd:i}),Ce.unlinkSync(`${i}/module.tgz`)}catch(s){l(s)}}}).catch(s=>{l(`There was an error downloading the tarball. Please check the URL and try again.

${s}`)}).finally(()=>{u("Copying the registry file...","copying"),Ce.writeFileSync(`${i}/registry.json`,JSON.stringify(o,null,2))}),u("Done.","success"),o},z=uo;var Ht={builda:"https://builda.app/modules/%REPO_NAME%",github:"https://raw.githubusercontent.com/%REPO_NAME%",bitbucket:"https://bitbucket.org/%REPO_NAME%/raw"};var fo=({resolver:e,modulePath:t,version:r,resolvers:o})=>{let i=o[e];if(!i)return"";let s=i;return s.includes("%REPO_NAME%")?s=s.replace("%REPO_NAME%",t):s=s.replace(`${e}`,""),s.includes("%VERSION%")?s=s.replace("%VERSION%",r):s=`${s}/${r||"latest"}`,s.endsWith("/")&&(s=s.slice(0,-1)),Ge(s)},Zt=fo;var mo=({registryPath:e,config:t})=>{var n;let r=e,o="",i=Ht;if(r.startsWith("http")||r.startsWith("https")){let a=r;return r.includes("github.com")&&(a=r.replace("github.com","raw.githubusercontent.com").replace("/blob","").replace("/tree","")),r.includes("bitbucket.org")&&(a=r.replace("src","raw")),a.endsWith("/")&&(a=a.slice(0,-1)),{url:a,error:o}}let s=r.match(/^([a-z]+:{1}[/]{0})([a-z0-9-/]+)((?:@{1}v?[0-9.]+)?(?:[\w\d-]*))?$/);if(s){let a=((n=s[1])==null?void 0:n.replace(":",""))||"",c=s[2]||"",p=s[3]?s[3].replace("@",""):"latest";t&&t.resolvers&&(i={...i,...t.resolvers});let d=Zt({resolver:a,modulePath:c,version:p,resolvers:i});return d||(o=`Could not find a resolver for ${r}`),{url:d,error:o}}else return o='Paths must start with a colon terminated lowercase string with no spaces or special characters (e.g. "builda:" or "([a-z]+:{1}[/]{0})" ) if using a resolver or "http(s)" if using a url',{url:"",error:o}},C=mo;import go from"fs";import ho from"path";import yo from"process";var bo=(e,t,r)=>{if(t){let o=`${e}s`,i=ho.resolve(yo.cwd(),`${m.buildaDir}/modules/${o}/${r.use}`),s=JSON.parse(go.readFileSync(`${i}/registry.json`,"utf8"));return{path:i,registry:s}}throw new Error("Could not find config file")},Ye=bo;var wo=({name:e,registry:t,script:r})=>{var s,n;let o=[],i=r!=null&&r.substitute&&((s=r.substitute)==null?void 0:s.length)>0?r==null?void 0:r.substitute:(n=t==null?void 0:t.generatorOptions)==null?void 0:n.substitutions;return i&&i.length&&i.forEach(a=>{var g;let c=a.with==="script"?e:a.with,p=(a==null?void 0:a.replace)||a.replace,f=(a==null?void 0:a.with)||c||"";!c&&!p&&a.required&&l(`"--${a.replace}" missing in arguments. This is required.
`),f&&!p&&o.push({replace:p.toUpperCase(),with:f}),p&&(f===""&&l(`"--${a.replace}" requires a value`),a.valid&&f!==""&&!((g=a.valid)!=null&&g.includes(f))&&l(`
"${f}" is not a valid ${a.replace}. Please use one of the following: 
 - ${a.valid.join(`
 - `)}
`),o.push({replace:a.replace.toUpperCase(),with:f}))}),o},_e=wo;import vo from"axios";import $o from"ajv";var Qt={$schema:"http://json-schema.org/draft-07/schema#",definitions:{ModuleConfig:{additionalProperties:{$ref:"#/definitions/ModuleConfigContents"},type:"object"},ModuleConfigContents:{additionalProperties:!1,properties:{location:{description:"The location of the module. This can be a local path, a remote url, a resolver or 'prefab' (if preinstalled inside a prefab)",type:"string"},outputDir:{description:"If the module should have a custom output directory, specify it here (relative to the app_root)",type:"string"},resolve:{anyOf:[{type:"string"},{additionalProperties:!1,properties:{type:{type:"string"},url:{type:"string"}},required:["url","type"],type:"object"}],description:"The custom resolver to use for the module"},version:{description:"The version of the module (not required for blueprints preinstalled inside a prefab)",type:"string"}},required:["location"],type:"object"},ModuleRegistry:{additionalProperties:!1,description:"See (https://builda.app/docs/build-a-module/registry) for more info",properties:{author:{additionalProperties:!1,description:"The module author's details",properties:{buildaUser:{description:"The builda username of the author. This is optional but is required if you want to publish your module to the builda trade store (see (https://builda.app/docs/trade-store))",type:"string"},email:{description:"The author's email",type:"string"},name:{description:"The author's name",type:"string"},website:{description:"The author's website",type:"string"}},required:["name"],type:"object"},blueprints:{$ref:"#/definitions/ModuleConfig",description:"If the module is a prefab and requires blueprints or has it's own blueprints, you should add them here if the module is a blueprint, this field is ignored",examples:["github:cool-developer/blueprint-cool-module@3.0.0","internal:blueprint-name"]},funding:{description:"Is this module looking for funding? If so, you can add a list of funding links here.",items:{type:"string"},type:"array"},generatorOptions:{additionalProperties:!1,description:"A set of options which will be passed to the module generator when the module has been installed",properties:{extraFolders:{description:"Extra folders which should be created in the module root when the module is installed (Will create any folders which don't already exist in the tree)",items:{type:"string"},type:"array"},substitutions:{additionalProperties:!1,description:"A set of substitutions which should be made in the module files when the module is installed",type:"array",items:{$ref:"#/definitions/TSubstitution"}},postScripts:{description:"Any post install scripts which should be run after the module has been installed and all files have been copied across and substitutions made (script paths are relative to the module root and should be in the form of a node cli script)",items:{type:"string"},type:"array"},rootFiles:{description:"Any files which should be copied to the module root when the module is installed in addition to the default files (see (https://builda.app/docs/build-a-module/prefabs#root-files)) e.g. .env files",items:{type:"string"},type:"array"}},type:"object"},keywords:{description:"The module keywords (optional but recommended if you want to publish your module to the builda trade store)",items:{type:"string"},type:"array"},name:{description:"The name of the module",type:"string"},prerelease:{default:!1,description:"If this is a prerelease, set this to true",type:"boolean"},publishToTradeStore:{default:!1,description:"Do you want to publish this module to the builda trade store? (see (https://builda.app/docs/trade-store))",type:"boolean"},type:{description:"The module type",enum:["blueprint","prefab"],type:"string"},url:{description:"The url of the module (generally a git repository) You can also use resolver aliases here. See (https://builda.app/docs/resolvers)",type:"string"},version:{description:"The module version number (in semver format)",pattern:"^\\d+\\.\\d+\\.\\d+$",type:"string"}},required:["name","type","version","url"],type:"object"},RootFile:{additionalProperties:!1,properties:{path:{description:"The path to the root file (relative to the .builda/export directory)",type:"string"},rewrite:{default:!1,description:"Should the file contents be rewritten with the default substitutions? https://builda.app/docs/build-a-module/substitutions",type:"boolean"},substitutions:{description:"Are there any custom substitutions to be made? see (https://builda.app/docs/build-a-module/substitutions)",items:{$ref:"#/definitions/TSubstitution"},type:"array"}},required:["path","substitutions"],type:"object"},TSubstitution:{additionalProperties:!1,properties:{replace:{description:"The string to be replaced",pattern:"^%[A-Z_]+%$",type:"string"},required:{default:!1,description:"Is this substitution required? (i.e. if it is not found, should the build fail?)",type:"boolean"},valid:{description:"Do you want to provide a list of valid options for this substitution? (i.e. if it is not found, should the build fail?)",items:{type:"string"},type:"array"},with:{description:"The string to replace with",type:"string"}},required:["replace","with"],type:"object"}}};var ko=new $o,X=async(e,t)=>{let r=e;if(!t){let i=C({registryPath:e});if(i.error)return{status:!1,message:i.error};r=i.url}let o=r.includes("registry.json")?r:`${r}/registry.json`;return vo.get(o).then(i=>{var a;if(!i.data)return{status:!1,message:"Something went wrong while fetching the registry. No data was returned and no error was provided."};let s=ko.compile(Qt);return s(i.data)?{status:!0,message:"Registry fetched successfully"}:((a=s.errors)==null||a.forEach(c=>{console.log(`Registry validation error: ${c.message}`)}),{status:!1,message:"The registry file is not valid. Please check the documentation for the correct format."})}).catch(i=>i.code==="ENOTFOUND"||i.code==="ERR_BAD_REQUEST"?{status:!1,message:"The url must point to a folder that contains a registry.json file"}:i.code==="ECONNREFUSED"?{status:!1,message:`The server at ${o} is not responding are you sure it is correct?`}:{status:!1,message:i.message})};import jo from"inquirer";import He from"chalk";var Kt=[{name:"Test Blueprint",value:"github:builda-modules/blueprint-test"},{name:"Fake blueprint",value:""},{name:"Another fake blueprint",value:""},{name:"Yet another fake blueprint",value:""}];var Vt=async(e,t)=>{let r=await X(e);if(r.status){if(t.prefabRegistry){let i=t.prefabRegistry.blueprints;return i&&i[e]?{status:!1,message:"A blueprint with that name already exists"}:{status:!0,message:""}}return{status:!0,message:""}}return{status:!1,message:r.message||"Could not validate the blueprint"}},Ze=async e=>(y(`These questions are all about adding blueprints to your project.\r

If you're not sure what a blueprint is`+N({link:"docs/blueprints"})),jo.prompt([{type:"confirm",name:"addBlueprints",message:()=>{let t=[],r=e.prefabRegistry,o=r==null?void 0:r.blueprints;return e.prefab&&o&&(t=Object.keys(o),y(`You are generating this project from the ${He.blue(r.name)} prefab.

It comes with the following blueprints:

	`+t.map(i=>He.blue(i)).join(`
	`)+`

Ensure that any additional blueprints you add are compatible with this prefab.`,"warning")),`Do you want to add any${t.length?"additional":""} blueprints to your project?`},default:!0},{type:"list",name:"blueprintChoice",message:"Do you have url(s) for your blueprint(s) or do you want to choose from a list?",choices:[{name:"I have url(s)",value:"url"},{name:"I want to choose from a list (coming soon)",value:"list",disabled:"This option is not available yet"}]},{type:"input",name:"blueprintUrls",message:"Enter the blueprint url(s) (if adding more than one, please separate them with a space):",when:t=>t.blueprintChoice==="url",validate:async t=>{if(!t)return"You must enter at least one url";let r=t.split(" ");for(let o of r){let i=await Vt(o,e);if(!i.status)return`The module at ${o} returned an error: ${i.message}`}return!0}},{type:"checkbox",name:"blueprintList",message:()=>(y("This list is not exhaustive. You can find more blueprints at "+He.blue.underline(I("tradeStore/blueprints"))),"Choose your blueprints:"),choices:Kt,when:t=>t.blueprintChoice==="list",validate:async t=>{if(!t.length)return"You must choose at least one blueprint";for(let r of t){let o=await Vt(r,e);if(!o.status)return`The module at ${r} returned an error: ${o.message}`}return!0}}]));import Ae from"fs";import To from"inquirer";import Xt from"chalk";var Qe=async()=>{let e=()=>{try{return JSON.parse(Ae.readFileSync("package.json","utf8"))}catch{return""}};e()||(y("You must have a package.json file in the root of your project to add to an existing project.","error"),process.exit(1));let{name:t}=e(),o=(()=>!!(Ae.existsSync("lerna.json")||e().workspaces))(),s=(()=>Ae.existsSync("yarn.lock")?"yarn":Ae.existsSync("package-lock.json")?"npm":"unknown")();return To.prompt([{type:"input",name:"projectName",message:`We think your project is called ${Xt.bold.magenta(t)}. Press enter if correct? If not, enter the correct name here.`,default:t},{type:"input",name:"appRoot",message:()=>(y(`The app root is the directory where your app files are stored.

This is usually your current working directory but if you are using a monorepo or if you'd like to store your app files in a different directory, you can specify it here it here.

If you're not sure, just press enter to use the current working directory.`),`We think your app root ${o?"may be in a monorepo, please enter the package name. If it is not a monorepo, just press enter to use ./ or specify the directory your app is store in":"is ./"}`),default:"./"},{type:"list",name:"packageManager",message:()=>(y("Builda works with both npm and yarn. If you are using a different package manager, unfortunately, Builda may not work for you."),"We think you are using "+Xt.bold.magenta(s)+". Press enter if correct? If not, select the correct package manager."),choices:["npm","yarn"],default:s}])};import Po from"inquirer";import Co from"chalk";var Ke=async e=>{let t=we();return e&&y(`Great! That prefab is ready to install!

First things first though, we need a few more details, to get you set up.`,"success"),Po.prompt([{type:"input",name:"appName",required:!0,message:`What do you want to call your project? This will also be the folder name we will create for your app. (If you don't know, just press enter to use ${Co.bold.magenta(t)})`,default:t}])};import Eo from"inquirer";import Ee from"chalk";var er=[{name:"Test Prefab",value:"github:builda-modules/prefab-test"},{name:"Fake prefab",value:""},{name:"Another fake prefab",value:""},{name:"Yet another fake prefab",value:""}];var Ve=async()=>(y(`These questions are all about building a project from a prefab.

If you're not sure what a prefab is, visit `+Ee.blue.underline(I("docs/prefabs"))+Ee.white(" for more information.")),Eo.prompt([{type:"list",name:"prefabChoice",message:"Do you have a prefab url or do you want to choose from a list?",choices:[{name:"I have a url",value:"url"},{name:"I want to choose from a list (coming soon)",value:"list",disabled:"This option is not available yet"}]},{type:"input",name:"prefabUrl",message:()=>(y("The url should point to the folder that the prefabs registry.json file is in. It can be a regular link or use a resolver."+N({link:"docs/resolvers"})),"Enter the prefab url:"),when:e=>e.prefabChoice==="url",validate:async e=>{if(!e)return"You must enter a url";let t=await X(e);return t.status!==!0&&Ee.red(t.message),t.status}},{type:"list",name:"prefabList",message:()=>(y("This list is not exhaustive. You can find more prefabs at "+Ee.blue.underline(I("tradeStore/prefabs"))),"Choose a prefab:"),choices:er,when:e=>e.prefabChoice==="list"}]));var Fo=e=>e.startsWith("http")||e.startsWith("https")?e:`https://${e}`,Ge=Fo;import No from"axios";import U from"fs";import T from"path";async function tr(e,t,r,o,i,s,n,a,c){var L,Ie,ye,Tt;if(F(e)==="remote"){let w=C({registryPath:e}).url;w||l("No registry found"),t=await z(w,r)}else t=await q(e,r);t!=null&&t.name||l("No prefab found");let p=t.name,d=t.version,f=K(n);u(`Installed ${p}@${d}`,"success"),u("Creating export path...","processing"),oe(o,i),u("Export path created","success"),u("Copying required files to application...","copying");let g=T.join(i,n),b=U.readFileSync(T.resolve(i,"package.json"),{encoding:"utf8"}),x=JSON.parse(b),h={...x,name:v(s,"kebabCase")};(Ie=(L=t==null?void 0:t.generatorOptions)==null?void 0:L.rootFiles)==null||Ie.forEach(async w=>{let ee=typeof w=="string"?w:w.path,M=T.dirname(ee),W=T.basename(ee);if(typeof w=="string")await ue([w],r);else{let J=w.substitutions??[];await V({name:s,paths:[w.path],ignore:f,substitute:J,fromCustomPath:r,toRoot:!0})}if(W.startsWith("unique.")){U.unlinkSync(T.join(i,M,W));let J=W.replace("unique.","");u("Found unique file","processing"),U.renameSync(T.join(r,M,W),T.join(r,M,J)),u(`Renamed unique file to: ${J}`,"success");let G=x.builda||{},Le={...G,ignored:[...G.ignored||[],T.join(M,J)]};h.builda=Le}}),(Tt=(ye=t==null?void 0:t.generatorOptions)==null?void 0:ye.extraFolders)==null||Tt.forEach(async w=>{U.mkdirSync(T.join(r,w),{recursive:!0}),U.writeFileSync(T.join(r,w,".gitkeep"),"")});let j=x.scripts,O={};Object.entries(j).forEach(([w,ee])=>{O[w]=$e(w,ee)}),h.scripts=O,U.writeFileSync(T.join(r,"package.json"),JSON.stringify(h,null,2));let E=`${a}/assets/prefab-getting-started.md`,he=[{replace:"%PREFAB_NAME%",with:p},{replace:"%PREFAB_URL%",with:t.url},{replace:"%PREFAB_VERSION%",with:d}];if(await No.get(E,{headers:{"Content-Type":"text/plain"}}).then(w=>{w.status===200&&H({content:w.data,rename:c,outputDir:r,substitute:he})}).catch(w=>{console.log(w),u(`Could not download the getting started file. Visit ${a}/docs/getting-started#prefab for assistance`,"warning")}),U.existsSync(g)&&U.rmSync(g,{recursive:!0}),t.blueprints){u("Installing prefab blueprints...","installing");let w=[],ee=Object.keys(t.blueprints);for(let M of ee){let W=t.blueprints[M];u(`Installing blueprint: "${M}"`,"processing");let J=T.join(r,n,"modules","blueprints");if(S(J),W.location==="prefab"){let G=T.join(o,n,"modules","blueprints",M);U.existsSync(G)&&oe(G,T.join(J,M))}else{let G=F(W.location);w.push(new Promise(Le=>{if(G==="local"&&q(W.location,r),G==="remote"){let Pt=C({registryPath:W.location}).url;Pt||l("No registry found"),z(Pt,r)}Le(M)}))}u(`${M} installed`,"success")}await Promise.all(w)}return u("All files copied to application.","success"),t}var pe=async({appName:e,prefab:t,smokeTest:r})=>{let{buildaDir:o,websiteUrl:i,buildaReadmeFileName:s}=m;te();let n={};if(!t){let{usePrefab:h}=await Mo.prompt([{type:"confirm",name:"usePrefab",message:"Do you want to set the project up using a prefab?",default:!0}]);if(h){let j=await Ve();n.prefab=j.prefabUrl||j.prefabList}else y(`You can set up a project from scratch by answering a few questions about your project.\r

If you are unsure about any of these, you can always change them later by editing the 'builda' section of your package.json file.`);n.prefab&&y(`Great! That prefab is ready to install!

First things first though, we need a few more details, to get you set up.`,"success")}let a={};(!t||!e)&&(a=await Ke()),n={...n,...a};let c=e||n.appName,p=t||n.prefab,d=v(c,"kebabCase"),f=Xe.join(et.cwd(),d);await S(d),et.chdir(d);let g=Xe.join(f,o,"export"),b=Xe.join(f,o,"modules","prefab");rr.readdirSync(f).length!==0&&l(`The directory: '${d}' already exists. It is not recommended to install a prefab into an existing project.`),await S(g),p&&await tr(p,{},f,b,g,c,o,i,s),u(`Your application, "${c}" has been initialised!`,"success"),r?(et.chdir("../"),rr.rm(c,{recursive:!0,force:!0},h=>{h&&console.log(h),u("This was a smoke test. No files were created.","primary")})):(Ro("cd",[c]),u(`For more information about how to use your application, visit: ${i}/docs/getting-started`,"primary"))};var tt=()=>({command:"project [appName]",desc:"Generate a new app from a prefab",aliases:["app","--app","--project"],builder:e=>e.positional("appName",{describe:"The name of the app",type:"string",default:""}).option("prefab",{alias:"p",default:"",describe:"The prefab to use (url, local path, or preset name)",type:"string"}).option("smokeTest",{alias:"s",default:!1,describe:"Runs the command but deletes the output immediately",type:"boolean"}),handler:async e=>{let t={appName:e.appName,prefab:e.prefab,smokeTest:e.smokeTest};await pe({...t})}});import or from"chalk";import Fe from"process";import ae from"path";import de from"fs";import Io from"execa";var rt=async({command:e,args:t})=>{var p;let r=Fe.cwd(),o=ae.join(Fe.cwd(),m.buildaDir,"export");r.split("/").pop()==="export"&&(o=r);let i=de.readFileSync(ae.resolve(o,"package.json"),{encoding:"utf8"}),a=JSON.parse(i).scripts[e],c="";de.existsSync(ae.resolve(r,"yarn.lock"))&&de.existsSync(ae.resolve(r,"package-lock.json"))?l("Builda detected a yarn.lock file and a package-lock.json file. Please delete one of these files and try again"):de.existsSync(ae.resolve(r,"yarn.lock"))?c="yarn":de.existsSync(ae.resolve(r,"package-lock.json"))?c="npm":l("Builda could not detect a yarn.lock or package-lock.json file. Please run `yarn` or `npm install` and try again"),a||l(`No script found with the name '${e}'`),o||l(`No path found for script '${e}'`),e||l("No command found");try{let d=`${c} run ${e}`;if(t){let f=Object.keys(t),g=Object.values(t),b=f.reduce((x,h,j)=>{let O=g[j],E="";return h==="_"||h==="command"||h==="$0"?x:(h.length===1?E=`-${h}`:E=`--${h}`,O&&typeof O=="boolean"?` ${x} ${E}`:` ${x} ${E}="${O}"`)},"");d=`${d}${b}`}Fe.stdout.write(or.magenta("Running with Builda: ")+or.white.bold(`'${d}'`)+`
`),(p=Io.command(d,{cwd:o,stdio:"inherit"}).stdout)==null||p.pipe(Fe.stdout)}catch(d){l(d.message)}};var ot=()=>({command:"execute <command>",desc:"Execute a command from within the export directory",aliases:["x","exec"],builder:e=>e.positional("command",{describe:"The name of the command",type:"string",demandOption:!0}),handler:async e=>rt({command:e.command,args:e})});import Ne from"process";import ir from"fs";var it=async({pathString:e})=>{var i;let t=$();e||l("A path must be provided"),(i=t.ejected)!=null&&i.includes(e)&&l(`${e} has already been ejected.`);let r=e.replace(`${Ne.cwd()}/`,""),o=`${Ne.cwd()}/.builda/export/${r}`;try{ir.existsSync(o)||l(`No file found at ${o}.`),u(`Moving ${r} to application...`,"info"),ue([r],Ne.cwd()),u(`Deleting original from ${o}`,"info"),ir.rmSync(o,{recursive:!0,force:!0});let s=e.replace(`${Ne.cwd()}/`,""),n=t.ejected??[];n.push(s);let a={...t,ejected:n};_(a),u(`Ejected ${e}. You can now edit this file directly.`,"success")}catch(s){l(s.message)}};var st=()=>({command:"eject <pathString>",desc:"Eject a file or directory from builda to make it editable",builder:e=>e.positional("pathString",{describe:"The path to the file or directory to eject",type:"string",demandOption:!0}).option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async e=>it({pathString:e.pathString})});import A from"fs";import R from"path";var fe=async()=>{let e=$(),{prefab:t,blueprints:r}=e,{buildaDir:o}=m,i=process.cwd(),s=R.join(i,o,"modules");if(A.existsSync(s)||A.mkdirSync(s,{recursive:!0}),u("Installing modules...","info"),u("Looking for prefab...","processing"),t){A.existsSync(R.join(s,"prefab"))?l("prefab directory already exists, aborting"):A.mkdirSync(s,{recursive:!0}),u("Prefab found","success"),t.location||l("No prefab location found"),t.location==="prefab"&&l('Prefab location cannot be "prefab". Please specify a specific location'),t.version||u("No prefab version specified, using the location entry as full path to prefab","warning");let n=t.version?`${t.location}/v/${t.version}`:t.location;if(F(n)==="remote"){let c=C({registryPath:n}).url;await z(c)}else await q(n);let a=R.join(s,"prefab");if(A.existsSync(a)){u("Prefab installed successfully","success"),u("Creating export folder...","processing");let c=R.join(i,m.buildaDir),p=R.join(c,"modules","prefab"),d=R.join(c,"export");A.existsSync(d)||(A.mkdirSync(d,{recursive:!0}),Y(p,d),A.existsSync(R.join(d,m.buildaDir))&&A.rmSync(R.join(d,m.buildaDir),{force:!0,recursive:!0}),u("Export folder created successfully","success"))}else l("Prefab installation failed")}else u("No prefab found, skipping...","info");if(u("Looking for blueprints...","processing"),r){u("Blueprints found","success");let n=Object.entries(r);for(let[a,c]of n){if(!c.version&&c.location!=="prefab"&&u(`No version specified for ${a}, using location entry as full path to blueprint`,"warning"),c.location||l(`No blueprint path found for ${a}`),A.existsSync(R.join(s,"blueprints",a))?l(`blueprint ${a} already exists, aborting`):A.mkdirSync(s,{recursive:!0}),c.location==="prefab"){let p=R.join(s,"prefab",".builda","modules","blueprints",a);A.existsSync(p)?oe(p,R.join(s,"blueprints",a)):l(`No blueprint found in prefab for ${a}`)}else{let p=c.version?`${c.location}/v/${c.version}`:c.location;if(F(p)==="remote"){let d=C({registryPath:p}).url;await z(d)}else await q(p)}A.existsSync(R.join(s,"blueprints",a))?u(`Blueprint ${a} installed successfully`,"success"):l(`Blueprint ${a} installation failed`)}}else u("No blueprints found, skipping...","info")};var nt=()=>({command:"install",desc:"Installs the applications prefab and builds the export directory",builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async()=>fe()});import Lo from"path";import Do from"process";var me=async({modulePath:e,fromScript:t})=>{var a;let r={},o=$(),i=Do.cwd(),s=Lo.join(i,m.buildaDir,"modules"),n=e.includes(" ")?e.split(" "):[e];await S(s);for(let c of n){if(F(c)==="remote"){let p=C({registryPath:c}).url;p||l("No registry found"),r=await z(p)}else r=await q(c);if(!t)if(r!=null&&r.name){let p=r.type,d=r.name,f=r.version;p==="blueprint"&&(o!=null&&o.blueprints||(o.blueprints={}),(a=o==null?void 0:o.blueprints)!=null&&a[d]?l(`A blueprint called ${d} already exists. Perhaps you meant 'builda update ${d}?'`):o.blueprints[d]={version:f,location:c}),p==="prefab"&&l("You cannot add a prefab as a module. A prefab is used to set up a new project. Try 'builda project' instead."),_(o),u(`Added ${d} to your project`,"success")}else l("Something went wrong")}};var{websiteUrl:Oo}=m,at=()=>({command:"add <blueprintPath>",desc:"Adds a new blueprint",builder:e=>e.positional("blueprintPath",{describe:`The path to the blueprint (can be a resolver - see http://${Oo}/docs/resolvers)`,type:"string",demandOption:!0}).option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async e=>me({modulePath:e.blueprintPath})});import Z from"fs";import Bo from"tar";import Wo from"fs";var sr=(e,t)=>Wo.existsSync(e)?{error:!1,message:""}:{error:!0,message:`Cannot find ${t&&"a folder called"} '${e}' in the current directory.`};var ge=async e=>{let t=await P(),{name:r,type:o,version:i}=t,s="registry.json",n="module",a=[];if(Z.existsSync(".npmignore")){let x=Z.readFileSync(".npmignore","utf8").split(`
`);a.push(...x)}if(Z.existsSync(`${n}/.gitignore`)){let x=Z.readFileSync(`${n}/.gitignore`,"utf8").split(`
`).filter(h=>h!==""&&!h.startsWith("#"));a.push(...x)}t||l(`No ${s} file found. See ${N({link:"docs/packaging"})} for more information.`),r||l(`No name entry found in ${s}. Please add one.\r`),o||l(`No type entry found in ${s}. Please add one.\r`),!i&&!e&&l(`No version entry found in ${s}. Please add one.\r`);let c=sr(n,!0);c.error&&l(c.message),r.startsWith(`${o}-`)||l(`The name entry in ${s} must be prefixed with ${o}-.\r`),u("All checks passed.","success");let d=(e==null?void 0:e.replace("v",""))||i,f={...t,version:d},g=JSON.stringify(f,null,2);if(Z.writeFileSync(s,g),Z.existsSync(`${n}.tgz`)){if(u("A module package already exists. Do you want to overwrite it?","warning"),!await ke("Overwrite?")){u("Package process aborted","error");return}Z.unlinkSync(`${n}.tgz`)}u(`Packaging ${r}...`,"processing"),await Bo.create({file:`${n}.tgz`,gzip:!0,cwd:n,filter:b=>!a.includes(b)},Z.readdirSync(n)),u("Package created","success")};var lt=()=>({command:"package",desc:"Package a module ready for publishing",aliases:["package","pack"],handler:async()=>ge()});import lr from"fs";import{simpleGit as zo}from"simple-git";var nr=async()=>!0;import qo from"fs";var ar=(e,t)=>qo.existsSync(e)?{error:!1,message:""}:{error:!0,message:`Cannot find ${t&&"a folder called"} '${e}' in the current directory.`};var ct=async e=>{let t=await P(),{name:r,type:o,version:i,publishToTradeStore:s}=t,n="registry.json",a="README.md",c="module.tgz";t||l(`No ${n} file found. Publish can only be ran in the context of a module`),r||l(`No name entry found in ${n}. Please add one.\r`),o||l(`No type entry found in ${n}. Please add one.\r`),!i&&!e&&l(`No version entry found in ${n}. Please add one.\r`),s||u(`No tradeStore entry found in ${n}.
This module will not be published to the Builda Trade Store (https://builda.app/trade-store).\r`,"info"),lr.existsSync(c)||(u("No module package found. Building package...","processing"),await ge(e),u("Package built","success")),r.startsWith(`${o}-`)||l(`The name entry in ${n} must be prefixed with ${o}-.\r`);let d=ar(a);d.error&&l(d.message);let f=zo();f.checkIsRepo()||l("This is not a git repository. Please initialise git and try again.\r"),(await f.status()).isClean()||l("The git repository is not clean. Please commit all changes and try again.\r"),u("All checks passed.","success");let b=(e==null?void 0:e.replace("v",""))||i,x={...t,version:b},h=JSON.stringify(x,null,2);lr.writeFileSync(n,h),u(`Adding ${c} to git...`,"processing"),await f.add(`${c}`),await f.commit(`Adds updated ${c}`),u("Added to git","success"),u("Tagging the latest commit...","processing");let j=await f.tags();(j.all.includes(b)||j.all.includes(`v${b}`))&&l(`A tag with the version number v${b} already exists. Please update the version number in ${n} and try again.\r`),await f.addTag(`v${b}`);let E="tags";if(t.prerelease)u("Prerelease entry found in registry.json. Skipping latest tag...","info"),E="tag";else{let L=(await f.listRemote(["--tags"])).includes("refs/tags/latest"),ye=(await f.tags()).all.includes("latest");(L||ye)&&(await f.tag(["--delete","latest"]),await f.push(["origin","--delete","latest"])),await f.addTag("latest")}await f.pushTags("origin"),u(`${E} created.`,"success"),u("Pushing changes to git...","processing"),await f.push(),u("Changes pushed to git.","success"),s&&(u("Publishing to the Builda Trade Store...","processing"),nr()),u("Module published.","success")};var ut=()=>({command:"publish",desc:"publish a module",aliases:["pub","push"],builder:e=>e.option("version",{aliases:["v","ver"],default:"",describe:"update module version (semver)",type:"string"}),handler:async e=>ct(e.version)});import Uo from"chokidar";var pt=e=>{let{prefab:t}=e,r=[...e.ignored||[]];t||l("No prefab found in config file. Watch cannot be run without a prefab"),Uo.watch(".",{persistent:!0,ignoreInitial:!0,ignored:r}).on("change",i=>{console.log(`File ${i} has been changed`),B({type:"update",pathString:i})}).on("add",i=>{console.log(`File ${i} has been added`),B({type:"copy",pathString:i})}).on("addDir",i=>{console.log(`Directory ${i} has been added`),B({type:"copy",pathString:i})}).on("unlinkDir",i=>{console.log(`Directory ${i} has been deleted`),B({type:"delete",pathString:i})}).on("unlink",i=>{console.log(`File ${i} has been deleted`),B({type:"delete",pathString:i})}).on("ready",()=>{u("Watching for changes...","primary"),u("Press Ctrl+C to stop watching","secondary")})};var dt=()=>({command:"watch",desc:"Watches your app for changes and rebuilds",aliases:["w"],builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async()=>{let e=await $();if(e!=null&&e.prefab)return pt(e);(e==null?void 0:e.prefab)===void 0&&l("No prefab found in config file. Watch can only be run within a prefab"),l("No config file found")}});import ur from"fs";import mt from"path";import Jo from"fs";import cr from"path";var ft=({directory:e,parent:t})=>{let r=Jo.readdirSync(cr.resolve(e));return r.length!==0?r.map(o=>{let i=t?`${t}/${o}`:o;if(!o.match(/\.[jt]sx$/))return`export { default as ${v(o,"pascalCase")} } from './${i}';`;let s=cr.parse(o).name;return`export { default as ${v(s,"camelCase")} } from './${s}';`}).filter(o=>o).toString().replace(/,/g,`
`):""};var Go=`/**
 This file is autogenerated by Builda, please do not edit it.
 To generate an updated version, please run \`builda index\`
 **/`,gt=e=>{let{indexes:t}=e;if(!t)l(`No indexes entry found in the config file. Index files cannot be generated. See ${I("docs/config","indexes")} for more information.`);else{let{directories:r,indexExt:o}=t,i=o||"ts";r.forEach(s=>{let n=s,a=[],c="";s.includes("*")?(n=s.replace("/*",""),a=ur.readdirSync(mt.resolve(n)),a.forEach(d=>{let f=mt.resolve(`${n}/${d}`);return c+=`${ft({directory:f,parent:d})}
`})):c=ft({directory:s});let p=`${Go}

${c}`;c&&ur.writeFileSync(mt.resolve(n,`index.${i}`),p)}),u("Generating indexes","config")}};var ht=()=>({command:"indexer",desc:"Generate an index file for the specified directories",aliases:["index"],builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async e=>{let t=await $();if(t)return gt(t);l("No config file found")}});import Re from"fs";import dr from"path";var Yo=e=>{if(e.scripts){let t={};return Object.entries(e.scripts).forEach(o=>{let i=o[0];t[i]=o[1]}),t}else return l('No "scripts" entry found in config file')},pr=Yo;import _o from"inquirer";var fr=async(e,t,r,o,i)=>{let{buildaDir:s}=m,n=`${t}/${v(e,"kebabCase")}`,a=dr.join(s,"export",n);Re.existsSync(n)&&l(`A ${o.use} already exists with the name ${e}`),Re.existsSync(a)&&l(`An existing ${o.use} with the name ${e} was found in the prefab. Continuing will overwrite this version.\r
If you want to edit the prefab version, you need to eject it with 'builda eject ${e}'`),Re.mkdirSync(n,{recursive:!0});let{path:c,registry:p}=Ye("blueprint",r,o),d=(i==null?void 0:i.split(":"))||[],f=d.length===2?{replace:d[0],with:d[1]}:void 0,g=o?_e({registry:p,name:e,script:o,sub:f}):[],b=dr.resolve(c,"module");return Re.readdirSync(b).forEach(x=>{let h=`${b}/${x}`,j=`${n}`;H({file:h,rename:h.replace("temp_name",e),outputDir:j,substitute:g,name:e})}),r.prefab&&B({type:"copy",pathString:n}),u("Done!","success")},yt=async({config:e,name:t,scriptName:r,subString:o})=>{let i=pr(e),s=i==null?void 0:i[r];if(s.use)if((!t||t==="")&&l(`You need to provide a name for your new ${r}`),u(`Building new ${r}: '${t}'...`,"notice"),s.variants){let n=await _o.prompt([{type:"list",name:"variantChoice",message:`What type of ${r} do you wish to build?`,choices:s.variants.map(a=>({name:a.name,value:a.outputDir}))}]);await fr(t,n.variantChoice,e,s,o)}else await fr(t,s.outputDir,e,s,o);else l("No valid scripts found")};var bt=()=>({command:"new <scriptName>",desc:"Create something new from a blueprint",builder:e=>e.positional("scriptName",{describe:"The blueprint script to run",type:"string",default:""}).positional("name",{describe:"The name of the new thing",type:"string",default:""}).option("subString",{aliases:["s","sub"],default:"",describe:`A string matcher for the blueprint script. e.g: "%MY_STRING%:'new string'"`,type:"string"}),handler:async e=>{let t=await $();if(t)return yt({config:t,scriptName:e.scriptName,name:e.name});l("No config file found")}});import Ho from"fs";import wt from"path";var xt=async({config:e})=>{let{prefab:t}=e,r=process.cwd(),o=wt.join(r,m.buildaDir),i=wt.join(o,"modules","prefab");t||l("No prefab found in config file. Build cannot be run without a prefab");let s=[];u("Building your project","processing"),Ho.readdir(r,(n,a)=>{n&&l(n.message),a.forEach(c=>{se(i,c)||Y(`${r}/${c}`,wt.join(`${m.buildaDir}/export`,c)),s.push(Promise.resolve(c))}),Promise.all(s).then(()=>{u("Build complete","success")})})};var vt=()=>({command:"build",desc:"Build your project",aliases:["-b","--build"],builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async()=>{let e=await $();if(e)return xt({config:e});l("No config file found")}});import mr from"fs";import Zo from"path";var $t=async()=>{let e=$(),{prefab:t}=e,{buildaDir:r}=m,o=Zo.join(process.cwd(),r);mr.existsSync(o)?mr.rmdirSync(o,{recursive:!0}):t?(u("Prefab config found but no builda directory found.","warning"),u('Running "builda install" instead',"info")):l('No prefab found in config (perhaps you meant to run "builda init" instead?)'),await fe()};var kt=()=>({command:"update",desc:"Updates the applications prefab to the latest version",builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async()=>$t()});import gr from"fs";import Qo from"events";import hr from"inquirer";import Me from"chalk";var St=async({config:e})=>{Qo.defaultMaxListeners=50;let{buildaDir:t}=m,r={projectName:"",appRoot:"",packageManager:""};if(e&&Object.keys(e).length!==0){e.prefab&&(y('This project was generated from a prefab and cannot be reinitialised. Maybe you meant to run "builda install" instead?',"error"),process.exit(1)),y(`It looks like builda has already been initialised in this project.
You can overwrite the existing config if you want to start again.\r

`+Me.yellow("Be careful though")+", continuing will instantly delete any existing config and your"+t+" directory.","warning");let{overwrite:i}=await hr.prompt([{type:"confirm",name:"overwrite",message:Me.red("Are you sure you want to reset the builda config?"),default:!1}]);i||(u("Process aborted at user request","notice"),process.exit(0)),_(null),gr.existsSync(t)&&gr.rmSync(t,{recursive:!0})}y("Welcome to "+Me.magenta("Builda")+" This is a guided setup process help you get your project up and running."+N({link:"docs/init",endText:`if you get stuck.

`})+Me.white("You can exit the process at any time by pressing Ctrl+C."),"builda");let{initType:o}=await hr.prompt([{type:"list",name:"initType",message:"What would you like to do?",choices:[{name:"I want to start a new project",value:"new"},{name:"I want to add builda to an existing project",value:"existing"},{name:"I want to create my own prefab",value:"prefab"},{name:"I want to create my own blueprint",value:"blueprint"}]}]);if(o==="new"&&(y(`A fresh start! Let's get you set up with a new project.\r

You can choose to use a prefab to get started quickly, or you can set up a project from scratch.`),pe({})),o==="existing"){y(`You can add builda to an existing project by answering a few questions about your project.\r

If you are unsure about any of these, you can always change them later by editing the 'builda' entry in package.json.`);let i=await Qe();r={...r,...i};let s=await Ze(r);r={...r,...s};let n=r.blueprintUrls||r.blueprintList.join("");_({}),me({modulePath:n})}o==="prefab"&&(y(`You can create your own prefab by answering a few questions about your project.\r

If you are unsure about any of these, you can always change them later by editing the 'builda' entry in package.json.`+N({link:"docs/build-a-module",anchor:"prefab"})),console.log("Coming soon..."),process.exit(0)),o==="blueprint"&&(y(`You can create your own blueprint by answering a few questions about your project.\r

If you are unsure about any of these, you can always change them later by editing the 'builda' entry in package.json.\r

`+N({link:"docs/build-a-module",anchor:"blueprint"})),console.log("Coming soon..."),process.exit(0))};var jt=()=>({command:"init",desc:"Initialise builda",builder:e=>e.option("configPath",{aliases:["c","config"],default:"",describe:"The path to a config file",type:"string"}),handler:async e=>{let t=await $(!0);return St({config:t||void 0})}});import Ko from"inquirer";var yr=async e=>Ko.prompt(e);var br=async e=>{var n,a;let t=await P(),r=(a=(n=t==null?void 0:t.generatorOptions)==null?void 0:n.rootFiles)==null?void 0:a.filter(c=>typeof c!="string"&&c.rewrite),o=(r==null?void 0:r.map(c=>c.path))??[],i=r==null?void 0:r.map(c=>c.substitutions??[]),s=[...e,...(i==null?void 0:i.flat())??[]];V({paths:o,substitute:s,fromRoot:!0,toRoot:!0})};var{websiteUrl:ei}=m,wr=async()=>Vo.scriptName("builda").usage("$0 <cmd> [args]").help().demandCommand(1,'You need at least one command before moving on. Try "builda --help" for more information').command({...tt()}).command({...jt()}).command({...vt()}).command({...at()}).command({...st()}).command({...nt()}).command({...bt()}).command({...ot()}).command({...lt()}).command({...ut()}).command({...dt()}).command({...kt()}).command({...ht()}).epilogue(`For more information, visit ${Xo.blue.underline(`${ei}/docs`)}`).argv;Ct.main===module&&wr();var Ap=wr;export{wr as builda,yr as buildaQuestion,br as buildaSubstitute,v as changeCase,Ap as default,u as printMessage,l as throwError};
